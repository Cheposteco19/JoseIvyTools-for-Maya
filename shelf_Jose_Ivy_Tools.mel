global proc shelf_Jose_Ivy_Tools () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from baking_tools import ui as bake_tester_ui\n\nbake_tester_ui.show_ui()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Exporter_Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Exporter_Tool" 
        -overlayLabelColor 0.64859 0.599083 0.124723 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "bake_Prev.png" 
        -image1 "bake_Prev.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import baking_tools.ui as baking_tools_ui\nimport importlib\nimportlib.reload(baking_tools_ui)\n\nclass layer_editor_caller(baking_tools_ui.display_layer_ui):\n    def __init__(self):\n        print('layer editor called from shelf')\n\nlayer_editor_caller().open_ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from uv_tools import ui as uv_editing_tool_ui\n\nuv_editing_tool_ui.show_ui()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "UV_Tools" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "UV_Tools" 
        -overlayLabelColor 0.299715 0.530586 0.348849 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "UVEditorUV.png" 
        -image1 "UVEditorUV.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from maya import cmds\nfrom uv_tools import core as uv_tools_core\nimport maya.mel as mm\n\nUV_TOOLOS_WINDOW_NAME= 'uv_editing_tool_ui'\nSTRAIGHTEN_UVS_VALUE_NAME='straighten_uvs_value'\nSTRAIGTEN_U_CHECKBOX_NAME= 'straighten_u_checkbox'\nSTRAIGTEN_V_CHECKBOX_NAME= 'straighten_v_checkbox'\nTILEABLE_1M_BUTTON_NAME='tileable_1m_button'\nTILEABLE_2M_BUTTON_NAME='tileable_2m_button'\nCUSTOM_DENSITY_FLOATBOX_NAME= 'custom_density_value'\nCUSTOM_MAP_SIZE_INTBOX_NAME= 'custom_map_size_value'\nPRESERVE_UVS_CHECKBOX_NAME='preserve_UVs_checkbox'\nWIREFRAME_CHECKBOX_NAME='wireframe_checkbox'\n\n#Colors\nTITLE_GREEN=(.5,.7,.5)\nLIGHT_GREEN=(.2,.4,.2)\nGREEN=(.2,.3,.2)\nDARK_GREEN=(.1,.2,.1)\nTITLE_BLUE=(.7,.7,1)\nLIGHT_BLUE=(.2,.2,.4)\nBLUE=(.2,.2,.3)\nDARK_BLUE=(.1,.1,.2)\n\nclass uv_tool_window(object):\n    def __init__(self):\n        print('uv_tool_created')\n\n    def create_ui(self,*args):\n        \"\"\"Creates the window\"\"\"\n\n        cmds.columnLayout(adjustableColumn=True)\n        cmds.rowLayout(numberOfColumns=8)\n        cmds.shelfButton(command=uv_tools_core.center_pivot, image=\"CenterPivot.png\",\n                         annotation=\"Resets the selected object's pivot to center\")\n        cmds.shelfButton(command=uv_tools_core.delete_history, image=\"DeleteHistory.png\",\n                         annotation=\"Delete construction history on the selected object(s)\")\n        cmds.shelfButton(command=uv_tools_core.freeze_transformations, image=\"FreezeTransform.png\",\n                         annotation=\"Freeze transformations of the selected object(s)\")\n        cmds.shelfButton(command=uv_tools_core.combine, image=\"polyUnite.png\",\n                         annotation=\"Combine the selected polygon objects into one single object\")\n        cmds.shelfButton(command=uv_tools_core.separate, image=\"polySeparate.png\",\n                         annotation=\"Combine the selected polygon objects into one single object\")\n        cmds.shelfButton(command=uv_tools_core.stack_shells, image=\"polyStackShell.png\",\n                         annotation=\"Stack selected UV shells on top of each other\")\n        cmds.shelfButton(command=uv_tools_core.randomize_shells, image=\"polyRandomizeShell.png\",\n                         annotation=\"Randomize UV shells translation\")\n        cmds.shelfButton(image=\"textureEditor.png\", command=cmds.TextureViewWindow,\n                         annotation=\"Opens the UV editor\")\n        cmds.setParent('..')\n\n        # Baked column\n        cmds.rowLayout(numberOfColumns=2)\n        cmds.columnLayout(adjustableColumn=True, backgroundColor=BLUE)\n        cmds.text(label='BAKED', font='boldLabelFont', backgroundColor=TITLE_BLUE)\n        cmds.button(label='Camera-based', command=uv_tools_core.camera_based,\n                    backgroundColor=LIGHT_BLUE)\n        cmds.button(label='Cut/Sew Tool', command=uv_tools_core.set_cut_sew_tool,\n                    backgroundColor=LIGHT_BLUE)\n        cmds.button(label='Unfold', command=uv_tools_core.unfold,\n                    annotation='unfold / orient shells / layout / uv selection', backgroundColor=LIGHT_BLUE)\n\n        # Gridify\n        cmds.text(label='GRIDIFY', font='boldLabelFont', backgroundColor=DARK_BLUE)\n        cmds.button(label='Straighten\\nShell', backgroundColor=LIGHT_BLUE,\n                    command=straighten_shell, height=44)\n        cmds.rowLayout(numberOfColumns=3)\n        cmds.floatField(STRAIGHTEN_UVS_VALUE_NAME, value=35, precision=2, backgroundColor=DARK_BLUE, width=35)\n        cmds.checkBox(STRAIGTEN_U_CHECKBOX_NAME, label='U', highlightColor=DARK_BLUE, value=True, width=35)\n        cmds.checkBox(STRAIGTEN_V_CHECKBOX_NAME, label='V', highlightColor=DARK_BLUE, value=True)\n        cmds.setParent('..')\n        cmds.button(label='Straighten\\nUVs', backgroundColor=LIGHT_BLUE,\n                    command=straighten_uvs, height=34)\n        cmds.setParent('..')\n\n        # Tiled column\n        cmds.columnLayout(adjustableColumn=True, backgroundColor=GREEN)\n        cmds.text(label='TILED', font='boldLabelFont', backgroundColor=TITLE_GREEN)\n        cmds.button(label='Automatic', command=uv_tools_core.auto_unwrap,\n                    backgroundColor=LIGHT_GREEN, annotation='auto-uwraps / orient shells / layout')\n\n        # Preset Densities\n        cmds.rowLayout(numberOfColumns=2)\n        cmds.button(label='Tileable 1M\\n(10.24|1024)', command=texel_density_1m,\n                    backgroundColor=LIGHT_GREEN,\n                    annotation='set texel density / orient shells / unstack shells / sets edge mode')\n        cmds.button(label='Tileable 2M\\n(10.24|2048)', command=texel_density_2m,\n                    backgroundColor=LIGHT_GREEN,\n                    annotation='set texel density / orient shells / unstack shells / sets edge mode', width=96)\n        cmds.setParent('..')\n\n        cmds.text(label='CUSTOM', font='boldLabelFont', backgroundColor=DARK_GREEN)\n        cmds.rowLayout(numberOfColumns=2)\n\n        # Density first column\n        cmds.columnLayout(adjustableColumn=True)\n\n        cmds.button(label='Get', command=get_texel_density,\n                    backgroundColor=LIGHT_GREEN)\n        cmds.text(label='Texel density\\n(px/inch)', height=27)\n        cmds.floatField(CUSTOM_DENSITY_FLOATBOX_NAME, value=10.24, precision=2, backgroundColor=DARK_GREEN)\n\n        cmds.button(label='Reset\\nTools', command=uv_tools_core.reset_tools,\n                    annotation='reset move / rotate / scale tools', backgroundColor=LIGHT_GREEN, height=34)\n        cmds.setParent('..')\n\n        # Density second column\n        cmds.columnLayout(adjustableColumn=True)\n\n        cmds.button(label='Set', command=texel_density_custom,\n                    backgroundColor=LIGHT_GREEN)\n        cmds.text(label='Map size', height=27)\n        cmds.intField(CUSTOM_MAP_SIZE_INTBOX_NAME, value=4096, backgroundColor=DARK_GREEN)\n\n        cmds.checkBox(PRESERVE_UVS_CHECKBOX_NAME, label=\"preserve UVs\", onCommand=uv_tools_core.preserve_uvs,\n                      offCommand=uv_tools_core.dont_preserve_uvs, highlightColor=DARK_GREEN)\n        cmds.checkBox(WIREFRAME_CHECKBOX_NAME, label=\"wireframe\", onCommand=uv_tools_core.wireframe_on,\n                      offCommand=uv_tools_core.wireframe_off, highlightColor=DARK_GREEN, value=True)\n        cmds.setParent('..')\n        cmds.setParent('..')\n        cmds.setParent('..')\n        cmds.setParent('..')\n\n        # Credits\n        cmds.rowLayout(numberOfColumns=2, adjustableColumn=2)\n        cmds.text(label='V 3.0.0')\n        cmds.text(label='GD67_JoseMunguia   ', align='right')\n\n    def show_ui(self):\n        # Initialize Unfold3D\n        cmds.loadPlugin(\"Unfold3D.mll\")\n        if not cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, exists=True):\n            cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, label='UV tools', width=291, height=255, retain=False,\n                                  floating=True, uiScript='uv_tool_window().create_ui()')\n        cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, edit=True, restore=True)\n        cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, edit=True, visible=True)\n\n\n\ndef texel_density_1m(*args):\n    uv_tools_core.set_tileable_size(10.24, 1024)\n\ndef texel_density_2m(*args):\n    uv_tools_core.set_tileable_size(10.24, 2048)\n\ndef texel_density_custom(*args):\n    \"\"\"Reads the user input for setting the new texel density for the selection\"\"\"\n    density=cmds.floatField(CUSTOM_DENSITY_FLOATBOX_NAME, query=True, value=True)\n    map_size=cmds.intField(CUSTOM_MAP_SIZE_INTBOX_NAME, query=True, value=True)\n    uv_tools_core.set_tileable_size(density, map_size)\n\ndef straighten_uvs(*args):\n    \"\"\"Reads the user input for straighten the UVs for the selection\"\"\"\n    angle=cmds.floatField(STRAIGHTEN_UVS_VALUE_NAME, query=True, value=True)\n    u_bool=cmds.checkBox(STRAIGTEN_U_CHECKBOX_NAME, query=True, value=True)\n    v_bool = cmds.checkBox(STRAIGTEN_V_CHECKBOX_NAME, query=True, value=True)\n    u_string = ''\n    v_string = ''\n    if u_bool==True:\n        u_string='U'\n    if v_bool==True:\n        v_string='V'\n    mm.eval('texStraightenUVs \"{}{}\" {};'.format(u_string,v_string,angle))\n\ndef straighten_shell(*args):\n    \"\"\"Reads the user input for straighten the UVs for the selection\"\"\"\n    mm.eval('texStraightenShell;')\n\ndef uncheck_preserve_uvs():\n    \"\"\"\n\n    Unchecks the preserve UV checkbox in the window\n\n    \"\"\"\n    cmds.checkBox(PRESERVE_UVS_CHECKBOX_NAME,edit=True,value=False)\n\ndef get_texel_density(*args):\n    \"\"\"Gets the texel density of the selection and writes it in the texel density float box\"\"\"\n    map_size=cmds.intField(CUSTOM_MAP_SIZE_INTBOX_NAME,query=True,value=True)\n    texel_density=mm.eval(\"texGetTexelDensity(%i);\" % map_size)\n    cmds.floatField(CUSTOM_DENSITY_FLOATBOX_NAME,edit=True,value=texel_density)\n\nuv_tool_window().show_ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "User Script" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "PathEditor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PathFix" 
        -overlayLabelColor 0.961038 0.202558 0.164144 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "errorModal.png" 
        -image1 "errorModal.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "FilePathEditor;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "User Script" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Renamer" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "rename.png" 
        -image1 "rename.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nclass RenamingToolUI:\n    def __init__(self):\n        self.window = \"RenamingToolWindow\"\n        \n        # Check if the window exists and delete if so\n        if cmds.window(self.window, exists=True):\n            cmds.deleteUI(self.window)\n        \n        # Create window with fixed size\n        self.window = cmds.window(self.window, title=\"Renaming Tool\", widthHeight=(350, 480), sizeable=False)\n        self.main_layout = cmds.columnLayout(adjustableColumn=True)\n\n        # Header\n        cmds.separator(height=15, style='none')\n        cmds.text(label=\"Rigging Renamer Tool\", font=\"boldLabelFont\", align=\"center\")\n        cmds.separator(height=15, style='none')\n\n        # Replace Functionality\n        cmds.frameLayout(label=\"Replace Text\", collapsable=True, collapse=False)\n        cmds.text(label=\"Replace (e.g., 'R_' with 'L_')\", align=\"center\")\n        cmds.rowLayout(numberOfColumns=2, adjustableColumn=2)\n        cmds.text(label=\"From:\")\n        self.replace_from = cmds.textField()\n        cmds.setParent(\"..\")\n        cmds.rowLayout(numberOfColumns=2, adjustableColumn=2)\n        cmds.text(label=\"To:\")\n        self.replace_to = cmds.textField()\n        cmds.setParent(\"..\")\n        cmds.button(label=\"Apply Replacement\", bgc=(0.6, 0.8, 1.0), command=self.apply_replace, annotation=\"Replace specified text in selected names\")\n        cmds.setParent(\"..\")\n        \n        # Suffix Functionality\n        cmds.frameLayout(label=\"Add Suffix\", collapsable=True, collapse=False)\n        cmds.text(label=\"Suffix Text\", align=\"center\")\n        self.suffix_text = cmds.textField()\n        cmds.button(label=\"Add Suffix\", bgc=(0.8, 1.0, 0.8), command=self.apply_suffix, annotation=\"Add specified suffix to selected names\")\n        cmds.setParent(\"..\")\n\n        # Prefix Functionality\n        cmds.frameLayout(label=\"Add Prefix\", collapsable=True, collapse=False)\n        cmds.text(label=\"Prefix Text\", align=\"center\")\n        self.prefix_text = cmds.textField()\n        cmds.button(label=\"Add Prefix\", bgc=(1.0, 0.8, 0.8), command=self.apply_prefix, annotation=\"Add specified prefix to selected names\")\n        cmds.setParent(\"..\")\n        \n        # Remove Functionality\n        cmds.frameLayout(label=\"Remove Text\", collapsable=True, collapse=False)\n        cmds.text(label=\"Text to Remove\", align=\"center\")\n        self.remove_text = cmds.textField()\n        cmds.button(label=\"Remove Text\", bgc=(1.0, 0.6, 0.6), command=self.apply_remove, annotation=\"Remove specified text from selected names\")\n        cmds.setParent(\"..\")\n\n        # Reset Button\n        cmds.separator(height=10, style='in')\n        cmds.button(label=\"Reset All Fields\", command=self.reset_fields, bgc=(1.0, 0.7, 0.7), annotation=\"Clear all input fields\")\n        \n        # Show window with fixed size\n        cmds.showWindow(self.window)\n\n    def apply_replace(self, *args):\n        joint_list = cmds.ls(sl=True, long=True)\n        replace_from = cmds.textField(self.replace_from, query=True, text=True)\n        replace_to = cmds.textField(self.replace_to, query=True, text=True)\n        \n        for each in joint_list[::-1]:\n            last_object = each.split(\"|\")[-1]\n            new_name = last_object.replace(replace_from, replace_to)\n            cmds.rename(each, new_name)\n    \n    def apply_suffix(self, *args):\n        joint_list = cmds.ls(sl=True, long=True)\n        suffix_text = cmds.textField(self.suffix_text, query=True, text=True)\n        \n        for each in joint_list[::-1]:\n            last_object = each.split(\"|\")[-1]\n            new_name = f\"{last_object}_{suffix_text}\"\n            cmds.rename(each, new_name)\n\n    def apply_prefix(self, *args):\n        joint_list = cmds.ls(sl=True, long=True)\n        prefix_text = cmds.textField(self.prefix_text, query=True, text=True)\n        \n        for each in joint_list[::-1]:\n            last_object = each.split(\"|\")[-1]\n            new_name = f\"{prefix_text}_{last_object}\"\n            cmds.rename(each, new_name)\n\n    def apply_remove(self, *args):\n        joint_list = cmds.ls(sl=True, long=True)\n        remove_text = cmds.textField(self.remove_text, query=True, text=True)\n        \n        for each in joint_list[::-1]:\n            last_object = each.split(\"|\")[-1]\n            new_name = last_object.replace(remove_text, \"\")\n            cmds.rename(each, new_name)\n\n    def reset_fields(self, *args):\n        cmds.textField(self.replace_from, edit=True, text=\"\")\n        cmds.textField(self.replace_to, edit=True, text=\"\")\n        cmds.textField(self.suffix_text, edit=True, text=\"\")\n        cmds.textField(self.prefix_text, edit=True, text=\"\")\n        cmds.textField(self.remove_text, edit=True, text=\"\")\n\n# Run the enhanced UI\nRenamingToolUI()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
