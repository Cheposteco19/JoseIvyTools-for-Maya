global proc shelf_Jose_Ivy_Tools () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from baking_tools import ui as bake_tester_ui\n\nbake_tester_ui.show_ui()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Exporter_Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Exporter_Tool" 
        -overlayLabelColor 0.64859 0.599083 0.124723 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "bake_Prev.png" 
        -image1 "bake_Prev.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from baking_tools import core as baking_tools_core\nfrom maya import cmds\nimport maya.mel as mm\nimport json\nimport os\n\n#Window components names\nBAKE_WINDOW_NAME= 'bake_test_ui'\nAUTOUNWRAP_CHECK_BOX_NAME= 'auto_unwrap_check_box'\nLOW_POLY_PATH_TEXT_BOX_NAME='low_poly_path_text_box'\nHIGH_POLY_PATH_TEXT_BOX_NAME='high_poly_path_text_box'\nEXTRA_PATH_TEXT_BOX_NAME_1='extra_path_text_box_1'\nEXTRA_PATH_TEXT_BOX_NAME_2='extra_path_text_box_2'\nEXTRA_PATH_TEXT_BOX_NAME_3='extra_path_text_box_3'\nEXTRA_PATH_TEXT_BOX_NAME_4='extra_path_text_box_4'\nEXTRA_PATH_TEXT_BOX_NAME_5='extra_path_text_box_5'\nEXTRA_PATH_TEXT_BOX_NAME_6='extra_path_text_box_6'\nEXTRA_PATH_TEXT_BOX_NAME_7='extra_path_text_box_7'\nEXTRA_PATH_TEXT_BOX_NAME_8='extra_path_text_box_8'\nDOCK_CONTROL_NAME='bake_tester_dock_control'\n\n#Save preferances settings\nDIRECTORY_HISTORY_NAME='directory_history'\nDIRECTORY_HISTORY_ROOT_DIR = mm.eval('getenv \"MAYA_APP_DIR\";')\nDIRECTORY_HISTORY_EXT= 'json'\n\n#Colors\nLIGHT_GREEN=(.2,.4,.2)\nGREEN=(.2,.3,.2)\nDARK_GREEN=(.1,.2,.1)\nLIGHT_BLUE=(.2,.2,.4)\nBLUE=(.2,.2,.3)\nDARK_BLUE=(.1,.1,.2)\n\nclass export_tool_window(object):\n\n    def __init__(self):\n        print('bake_tool_created')\n\n    def create_ui(self):\n        \"\"\"\n\n        Creates the window\n\n        \"\"\"\n        paths_dict=read_directory_from_file()\n\n        #Auto-Unwrap\n        cmds.columnLayout(adjustableColumn=True, columnOffset=('both',10))\n        cmds.columnLayout(adjustableColumn=True, backgroundColor=BLUE)\n\n\n        #Colapsable menu 1\n        cmds.frameLayout('BAKED', collapsable=True, collapse=False, backgroundColor=DARK_BLUE, fn='boldLabelFont')\n        cmds.checkBox(AUTOUNWRAP_CHECK_BOX_NAME, label=\"Auto-Unwrap Slot 1\", annotation=\"auto-unwrap / unfold / kills history and numbers\", highlightColor=DARK_BLUE)\n\n        # Browse Low Export\n        cmds.rowLayout(numberOfColumns=4,adjustableColumn=2)\n        cmds.text(label='1 ')\n        if paths_dict.get(LOW_POLY_PATH_TEXT_BOX_NAME) is not None:\n            cmds.textField(LOW_POLY_PATH_TEXT_BOX_NAME, text=paths_dict[LOW_POLY_PATH_TEXT_BOX_NAME], backgroundColor=DARK_BLUE)\n        else:\n            cmds.textField(LOW_POLY_PATH_TEXT_BOX_NAME, backgroundColor=DARK_BLUE)\n        cmds.button(label='...',command=browse_low, backgroundColor=LIGHT_BLUE)\n        cmds.button(label='Export LOW',command=low_exportFBX,width=73, backgroundColor=LIGHT_BLUE, annotation='unlock normals / conditions normals')\n        cmds.setParent('..')\n\n        # Browse High Export\n        cmds.rowLayout(numberOfColumns=4,adjustableColumn=2)\n        cmds.text(label='2 ')\n        if paths_dict.get(HIGH_POLY_PATH_TEXT_BOX_NAME) is not None:\n            cmds.textField(HIGH_POLY_PATH_TEXT_BOX_NAME, text=paths_dict[HIGH_POLY_PATH_TEXT_BOX_NAME], backgroundColor=DARK_BLUE)\n        else:\n            cmds.textField(HIGH_POLY_PATH_TEXT_BOX_NAME, backgroundColor=DARK_BLUE)\n        cmds.button(label='...',command=browse_high, backgroundColor=LIGHT_BLUE)\n        cmds.button(label='Export HIGH',command=high_exportFBX, backgroundColor=LIGHT_BLUE)\n        cmds.setParent('..')\n        cmds.setParent('..')\n        cmds.setParent('..')\n\n        #Colapsable menu 2\n        cmds.columnLayout(adjustableColumn=True, backgroundColor=GREEN)\n        cmds.frameLayout('TILED',collapsable=True,collapse=True, backgroundColor=DARK_GREEN, fn='boldLabelFont')\n\n        # Browse Extra Export 1\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='1 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_1) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_1, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_1], backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_1, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_1, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX1, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n\n        # Browse Extra Export 2\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='2 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_2) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_2, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_2], backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_2, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_2, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX2, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n\n        # Browse Extra Export 3\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='3 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_3) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_3, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_3], backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_3, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_3, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX3, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n\n        # Browse Extra Export 4\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='4 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_4) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_4, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_4], backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_4, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_4, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX4, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n\n        # Browse Extra Export 5\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='5 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_5) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_5, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_5], backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_5, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_5, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX5, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n\n        # Browse Extra Export 6\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='6 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_6) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_6, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_6], backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_6, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_6, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX6, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n\n        # Browse Extra Export 7\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='7 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_7) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_7, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_7],\n                           backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_7, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_7, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX7, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n\n        # Browse Extra Export 8\n        cmds.rowLayout(numberOfColumns=4, adjustableColumn=2)\n        cmds.text(label='8 ')\n        if paths_dict.get(EXTRA_PATH_TEXT_BOX_NAME_8) is not None:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_8, text=paths_dict[EXTRA_PATH_TEXT_BOX_NAME_8],\n                           backgroundColor=DARK_GREEN)\n        else:\n            cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_8, backgroundColor=DARK_GREEN)\n        cmds.button(label='...', command=browse_extra_8, backgroundColor=LIGHT_GREEN)\n        cmds.button(label='Export', command=extra_exportFBX8, backgroundColor=LIGHT_GREEN)\n        cmds.setParent('..')\n        cmds.setParent('..')\n        cmds.setParent('..')\n\n        #Credits\n        cmds.rowLayout(numberOfColumns=2, adjustableColumn=2)\n        cmds.text(label='V 1.2.0')\n        cmds.text(label='GD67_JoseMunguia   ', align='right')\n\n    def show_ui(self):\n        #Initialize Unfold3D\n        cmds.loadPlugin(\"Unfold3D.mll\")\n\n        # Delete old window\n        if not cmds.workspaceControl(BAKE_WINDOW_NAME, exists=True):\n            cmds.workspaceControl(BAKE_WINDOW_NAME, floating=True, label='Exporter', uiScript='export_tool_window().create_ui()', width=500, height=150, retain=False)\n\n        cmds.workspaceControl(BAKE_WINDOW_NAME, edit=True, restore=True)\n        cmds.workspaceControl(BAKE_WINDOW_NAME, edit=True, visible=True)\n\n    # Browse defined\ndef browse_low(*args):\n    \"\"\"Browses for low\"\"\"\n    browse(LOW_POLY_PATH_TEXT_BOX_NAME)\n\ndef browse_high(*args):\n    \"\"\"browses for high\"\"\"\n    browse(HIGH_POLY_PATH_TEXT_BOX_NAME)\n\ndef browse_extra_1(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_1)\n\ndef browse_extra_2(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_2)\n\ndef browse_extra_3(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_3)\n\ndef browse_extra_4(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_4)\n\ndef browse_extra_5(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_5)\n\ndef browse_extra_6(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_6)\n\ndef browse_extra_7(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_7)\n\ndef browse_extra_8(*args):\n    \"\"\"browses for high\"\"\"\n    browse(EXTRA_PATH_TEXT_BOX_NAME_8)\n\ndef browse(textbox):\n    \"\"\"\n    Browses\n    Args:\n        textbox: for writing the user input when he browses\n    \"\"\"\n    path = cmds.fileDialog2(fileFilter=\"*.fbx\", dialogStyle=2)\n    cmds.textField(textbox, edit=True, text=path[0])\n\n#Export buttons\ndef low_exportFBX(*args):\n    \"\"\"Checks if auto unwrap is necesary and exports the selectction to the low poly path\"\"\"\n    selected_items = cmds.ls(sl=True)\n    if cmds.checkBox(AUTOUNWRAP_CHECK_BOX_NAME, query=True, value=True)==True:\n        baking_tools_core.auto_unwrap(selected_items)\n    baking_tools_core.soft_texture_borders(selected_items)\n    exportFBX(LOW_POLY_PATH_TEXT_BOX_NAME)\n\ndef high_exportFBX(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(HIGH_POLY_PATH_TEXT_BOX_NAME)\n\ndef extra_exportFBX1(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_1)\n\ndef extra_exportFBX2(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_2)\n\ndef extra_exportFBX3(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_3)\n\ndef extra_exportFBX4(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_4)\n\ndef extra_exportFBX5(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_5)\n\ndef extra_exportFBX6(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_6)\n\ndef extra_exportFBX7(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_7)\n\ndef extra_exportFBX8(*args):\n    \"\"\"Exports the selecton to the high poly path\"\"\"\n    exportFBX(EXTRA_PATH_TEXT_BOX_NAME_8)\n\ndef exportFBX(text_box):\n    \"\"\"\n    Gets the user input path, saves it and exports the FBX\n    Args:\n        text_box:which text box is the one to be read\n    \"\"\"\n    paths_dict = save_paths_to_file()\n    path_to_export = paths_dict[text_box]\n    cmds.file(path_to_export, force=True, options='v=0;', type='FBX export', exportSelected=True, preserveReferences=True)\n\ndef save_paths_to_file():\n    \"\"\"\n    Saves paths in user preferences\n    Returns: previous paths dictionary\n    \"\"\"\n    paths_dict = read_directories_from_text_boxes()\n    write_directory_to_file(DIRECTORY_HISTORY_NAME, paths_dict)\n    return paths_dict\n\ndef read_directories_from_text_boxes():\n    \"\"\"\n    Reads paths from user input\n    Returns: paths dictionary read\n    \"\"\"\n    paths_dict={}\n    paths_dict[HIGH_POLY_PATH_TEXT_BOX_NAME] = cmds.textField(HIGH_POLY_PATH_TEXT_BOX_NAME, query=True, text=True)\n    paths_dict[LOW_POLY_PATH_TEXT_BOX_NAME] = cmds.textField(LOW_POLY_PATH_TEXT_BOX_NAME, query=True, text=True)\n    paths_dict[EXTRA_PATH_TEXT_BOX_NAME_1] = cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_1, query=True, text=True)\n    paths_dict[EXTRA_PATH_TEXT_BOX_NAME_2] = cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_2, query=True, text=True)\n    paths_dict[EXTRA_PATH_TEXT_BOX_NAME_3] = cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_3, query=True, text=True)\n    paths_dict[EXTRA_PATH_TEXT_BOX_NAME_4] = cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_4, query=True, text=True)\n    paths_dict[EXTRA_PATH_TEXT_BOX_NAME_5] = cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_5, query=True, text=True)\n    paths_dict[EXTRA_PATH_TEXT_BOX_NAME_6] = cmds.textField(EXTRA_PATH_TEXT_BOX_NAME_6, query=True, text=True)\n    return paths_dict\n\ndef write_directory_to_file(directory_history_name, directory_dict):\n    \"\"\"Writes paths into user preferences\"\"\"\n    file_name='{}.{}'.format(directory_history_name, DIRECTORY_HISTORY_EXT)\n    file_path=os.path.join(DIRECTORY_HISTORY_ROOT_DIR, file_name)\n\n    with open(file_path,'w') as f:\n        json.dump(directory_dict, f, indent=4)\n\ndef read_directory_from_file():\n    \"\"\"\n    Reads paths from user preferences\n    Returns: paths dictionary read\n    \"\"\"\n    file_path = r'{}\\{}.{}'.format(DIRECTORY_HISTORY_ROOT_DIR,DIRECTORY_HISTORY_NAME,DIRECTORY_HISTORY_EXT)\n    if not os.path.exists(file_path):\n        directory_dict={}\n        directory_dict[HIGH_POLY_PATH_TEXT_BOX_NAME]=''\n        directory_dict[LOW_POLY_PATH_TEXT_BOX_NAME]=''\n        directory_dict[EXTRA_PATH_TEXT_BOX_NAME_1]=''\n        directory_dict[EXTRA_PATH_TEXT_BOX_NAME_2]=''\n        directory_dict[EXTRA_PATH_TEXT_BOX_NAME_3]=''\n        directory_dict[EXTRA_PATH_TEXT_BOX_NAME_4]=''\n        directory_dict[EXTRA_PATH_TEXT_BOX_NAME_5]=''\n        directory_dict[EXTRA_PATH_TEXT_BOX_NAME_6]=''\n        return directory_dict\n    with open(file_path, 'r') as f:\n        directory_dict = json.load(f)\n    return directory_dict\n\nexport_tool_window().show_ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from uv_tools import ui as uv_editing_tool_ui\n\nuv_editing_tool_ui.show_ui()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "UV_Tools" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "UV_Tools" 
        -overlayLabelColor 0.299715 0.530586 0.348849 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "UVEditorUV.png" 
        -image1 "UVEditorUV.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from maya import cmds\nfrom uv_tools import core as uv_tools_core\nimport maya.mel as mm\n\nUV_TOOLOS_WINDOW_NAME= 'uv_editing_tool_ui'\nSTRAIGHTEN_UVS_VALUE_NAME='straighten_uvs_value'\nSTRAIGTEN_U_CHECKBOX_NAME= 'straighten_u_checkbox'\nSTRAIGTEN_V_CHECKBOX_NAME= 'straighten_v_checkbox'\nTILEABLE_1M_BUTTON_NAME='tileable_1m_button'\nTILEABLE_2M_BUTTON_NAME='tileable_2m_button'\nCUSTOM_DENSITY_FLOATBOX_NAME= 'custom_density_value'\nCUSTOM_MAP_SIZE_INTBOX_NAME= 'custom_map_size_value'\nPRESERVE_UVS_CHECKBOX_NAME='preserve_UVs_checkbox'\nWIREFRAME_CHECKBOX_NAME='wireframe_checkbox'\n\n#Colors\nTITLE_GREEN=(.5,.7,.5)\nLIGHT_GREEN=(.2,.4,.2)\nGREEN=(.2,.3,.2)\nDARK_GREEN=(.1,.2,.1)\nTITLE_BLUE=(.7,.7,1)\nLIGHT_BLUE=(.2,.2,.4)\nBLUE=(.2,.2,.3)\nDARK_BLUE=(.1,.1,.2)\n\nclass uv_tool_window(object):\n    def __init__(self):\n        print('uv_tool_created')\n\n    def create_ui(self,*args):\n        \"\"\"Creates the window\"\"\"\n\n        cmds.columnLayout(adjustableColumn=True)\n        cmds.rowLayout(numberOfColumns=8)\n        cmds.shelfButton(command=uv_tools_core.center_pivot, image=\"CenterPivot.png\",\n                         annotation=\"Resets the selected object's pivot to center\")\n        cmds.shelfButton(command=uv_tools_core.delete_history, image=\"DeleteHistory.png\",\n                         annotation=\"Delete construction history on the selected object(s)\")\n        cmds.shelfButton(command=uv_tools_core.freeze_transformations, image=\"FreezeTransform.png\",\n                         annotation=\"Freeze transformations of the selected object(s)\")\n        cmds.shelfButton(command=uv_tools_core.combine, image=\"polyUnite.png\",\n                         annotation=\"Combine the selected polygon objects into one single object\")\n        cmds.shelfButton(command=uv_tools_core.separate, image=\"polySeparate.png\",\n                         annotation=\"Combine the selected polygon objects into one single object\")\n        cmds.shelfButton(command=uv_tools_core.stack_shells, image=\"polyStackShell.png\",\n                         annotation=\"Stack selected UV shells on top of each other\")\n        cmds.shelfButton(command=uv_tools_core.randomize_shells, image=\"polyRandomizeShell.png\",\n                         annotation=\"Randomize UV shells translation\")\n        cmds.shelfButton(image=\"textureEditor.png\", command=cmds.TextureViewWindow,\n                         annotation=\"Opens the UV editor\")\n        cmds.setParent('..')\n\n        # Baked column\n        cmds.rowLayout(numberOfColumns=2)\n        cmds.columnLayout(adjustableColumn=True, backgroundColor=BLUE)\n        cmds.text(label='BAKED', font='boldLabelFont', backgroundColor=TITLE_BLUE)\n        cmds.button(label='Camera-based', command=uv_tools_core.camera_based,\n                    backgroundColor=LIGHT_BLUE)\n        cmds.button(label='Cut/Sew Tool', command=uv_tools_core.set_cut_sew_tool,\n                    backgroundColor=LIGHT_BLUE)\n        cmds.button(label='Unfold', command=uv_tools_core.unfold,\n                    annotation='unfold / orient shells / layout / uv selection', backgroundColor=LIGHT_BLUE)\n\n        # Gridify\n        cmds.text(label='GRIDIFY', font='boldLabelFont', backgroundColor=DARK_BLUE)\n        cmds.button(label='Straighten\\nShell', backgroundColor=LIGHT_BLUE,\n                    command=straighten_shell, height=44)\n        cmds.rowLayout(numberOfColumns=3)\n        cmds.floatField(STRAIGHTEN_UVS_VALUE_NAME, value=35, precision=2, backgroundColor=DARK_BLUE, width=35)\n        cmds.checkBox(STRAIGTEN_U_CHECKBOX_NAME, label='U', highlightColor=DARK_BLUE, value=True, width=35)\n        cmds.checkBox(STRAIGTEN_V_CHECKBOX_NAME, label='V', highlightColor=DARK_BLUE, value=True)\n        cmds.setParent('..')\n        cmds.button(label='Straighten\\nUVs', backgroundColor=LIGHT_BLUE,\n                    command=straighten_uvs, height=34)\n        cmds.setParent('..')\n\n        # Tiled column\n        cmds.columnLayout(adjustableColumn=True, backgroundColor=GREEN)\n        cmds.text(label='TILED', font='boldLabelFont', backgroundColor=TITLE_GREEN)\n        cmds.button(label='Automatic', command=uv_tools_core.auto_unwrap,\n                    backgroundColor=LIGHT_GREEN, annotation='auto-uwraps / orient shells / layout')\n\n        # Preset Densities\n        cmds.rowLayout(numberOfColumns=2)\n        cmds.button(label='Tileable 1M\\n(10.24|1024)', command=texel_density_1m,\n                    backgroundColor=LIGHT_GREEN,\n                    annotation='set texel density / orient shells / unstack shells / sets edge mode')\n        cmds.button(label='Tileable 2M\\n(10.24|2048)', command=texel_density_2m,\n                    backgroundColor=LIGHT_GREEN,\n                    annotation='set texel density / orient shells / unstack shells / sets edge mode', width=96)\n        cmds.setParent('..')\n\n        cmds.text(label='CUSTOM', font='boldLabelFont', backgroundColor=DARK_GREEN)\n        cmds.rowLayout(numberOfColumns=2)\n\n        # Density first column\n        cmds.columnLayout(adjustableColumn=True)\n\n        cmds.button(label='Get', command=get_texel_density,\n                    backgroundColor=LIGHT_GREEN)\n        cmds.text(label='Texel density\\n(px/inch)', height=27)\n        cmds.floatField(CUSTOM_DENSITY_FLOATBOX_NAME, value=10.24, precision=2, backgroundColor=DARK_GREEN)\n\n        cmds.button(label='Reset\\nTools', command=uv_tools_core.reset_tools,\n                    annotation='reset move / rotate / scale tools', backgroundColor=LIGHT_GREEN, height=34)\n        cmds.setParent('..')\n\n        # Density second column\n        cmds.columnLayout(adjustableColumn=True)\n\n        cmds.button(label='Set', command=texel_density_custom,\n                    backgroundColor=LIGHT_GREEN)\n        cmds.text(label='Map size', height=27)\n        cmds.intField(CUSTOM_MAP_SIZE_INTBOX_NAME, value=4096, backgroundColor=DARK_GREEN)\n\n        cmds.checkBox(PRESERVE_UVS_CHECKBOX_NAME, label=\"preserve UVs\", onCommand=uv_tools_core.preserve_uvs,\n                      offCommand=uv_tools_core.dont_preserve_uvs, highlightColor=DARK_GREEN)\n        cmds.checkBox(WIREFRAME_CHECKBOX_NAME, label=\"wireframe\", onCommand=uv_tools_core.wireframe_on,\n                      offCommand=uv_tools_core.wireframe_off, highlightColor=DARK_GREEN, value=True)\n        cmds.setParent('..')\n        cmds.setParent('..')\n        cmds.setParent('..')\n        cmds.setParent('..')\n\n        # Credits\n        cmds.rowLayout(numberOfColumns=2, adjustableColumn=2)\n        cmds.text(label='V 1.2.0')\n        cmds.text(label='GD67_JoseMunguia   ', align='right')\n\n    def show_ui(self):\n        # Initialize Unfold3D\n        cmds.loadPlugin(\"Unfold3D.mll\")\n        if not cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, exists=True):\n            cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, label='UV tools', width=291, height=255, retain=False,\n                                  floating=True, uiScript='uv_tool_window().create_ui()')\n        cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, edit=True, restore=True)\n        cmds.workspaceControl(UV_TOOLOS_WINDOW_NAME, edit=True, visible=True)\n\n\n\ndef texel_density_1m(*args):\n    uv_tools_core.set_tileable_size(10.24, 1024)\n\ndef texel_density_2m(*args):\n    uv_tools_core.set_tileable_size(10.24, 2048)\n\ndef texel_density_custom(*args):\n    \"\"\"Reads the user input for setting the new texel density for the selection\"\"\"\n    density=cmds.floatField(CUSTOM_DENSITY_FLOATBOX_NAME, query=True, value=True)\n    map_size=cmds.intField(CUSTOM_MAP_SIZE_INTBOX_NAME, query=True, value=True)\n    uv_tools_core.set_tileable_size(density, map_size)\n\ndef straighten_uvs(*args):\n    \"\"\"Reads the user input for straighten the UVs for the selection\"\"\"\n    angle=cmds.floatField(STRAIGHTEN_UVS_VALUE_NAME, query=True, value=True)\n    u_bool=cmds.checkBox(STRAIGTEN_U_CHECKBOX_NAME, query=True, value=True)\n    v_bool = cmds.checkBox(STRAIGTEN_V_CHECKBOX_NAME, query=True, value=True)\n    u_string = ''\n    v_string = ''\n    if u_bool==True:\n        u_string='U'\n    if v_bool==True:\n        v_string='V'\n    mm.eval('texStraightenUVs \"{}{}\" {};'.format(u_string,v_string,angle))\n\ndef straighten_shell(*args):\n    \"\"\"Reads the user input for straighten the UVs for the selection\"\"\"\n    mm.eval('texStraightenShell;')\n\ndef uncheck_preserve_uvs():\n    \"\"\"\n\n    Unchecks the preserve UV checkbox in the window\n\n    \"\"\"\n    cmds.checkBox(PRESERVE_UVS_CHECKBOX_NAME,edit=True,value=False)\n\ndef get_texel_density(*args):\n    \"\"\"Gets the texel density of the selection and writes it in the texel density float box\"\"\"\n    map_size=cmds.intField(CUSTOM_MAP_SIZE_INTBOX_NAME,query=True,value=True)\n    texel_density=mm.eval(\"texGetTexelDensity(%i);\" % map_size)\n    cmds.floatField(CUSTOM_DENSITY_FLOATBOX_NAME,edit=True,value=texel_density)\n\nuv_tool_window().show_ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "User Script" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "PathEditor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "errorModal.png" 
        -image1 "errorModal.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "FilePathEditor;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
